{"uid":"abae4246b55197f1","name":"test_get_not_existing_tourist_404_by_id","fullName":"tests.test_get_tourist_info#test_get_not_existing_tourist_404_by_id","historyId":"46c20b9eb1e682c3b892cbf9e04cd4fe","time":{"start":1686728801750,"stop":1686728802392,"duration":642},"description":"Tests correct response, 400 for non-existing tourist_id","descriptionHtml":"<p>Tests correct response, 400 for non-existing tourist_id</p>\n","status":"failed","statusMessage":"AssertionError: assert 404 == 400\n +  where 404 = <Response [404]>.status_code","statusTrace":"def test_get_not_existing_tourist_404_by_id():\n        '''Tests correct response, 400 for non-existing tourist_id'''\n        '''If the requested id is existing_id + 1 zero then the response is 404 without json'''\n        print(f\"Existing tourist_id is {TOURIST_ID}\")\n        request_url = BASE_URL + f\"Tourist/{TOURIST_ID}\" + \"0\"\n        print(f\"Requested URL is: {request_url}\")\n        response = requests.get(request_url)\n        print(f\"Returned status code is {response.status_code}\")\n>       assert response.status_code == 400\nE       assert 404 == 400\nE        +  where 404 = <Response [404]>.status_code\n\ntests/test_get_tourist_info.py:91: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1686728796389,"stop":1686728796411,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_xunit_setup_module_fixture_tests.test_get_tourist_info","time":{"start":1686728799766,"stop":1686728800440,"duration":674},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Tests correct response, 400 for non-existing tourist_id","status":"failed","statusMessage":"AssertionError: assert 404 == 400\n +  where 404 = <Response [404]>.status_code","statusTrace":"def test_get_not_existing_tourist_404_by_id():\n        '''Tests correct response, 400 for non-existing tourist_id'''\n        '''If the requested id is existing_id + 1 zero then the response is 404 without json'''\n        print(f\"Existing tourist_id is {TOURIST_ID}\")\n        request_url = BASE_URL + f\"Tourist/{TOURIST_ID}\" + \"0\"\n        print(f\"Requested URL is: {request_url}\")\n        response = requests.get(request_url)\n        print(f\"Returned status code is {response.status_code}\")\n>       assert response.status_code == 400\nE       assert 404 == 400\nE        +  where 404 = <Response [404]>.status_code\n\ntests/test_get_tourist_info.py:91: AssertionError","steps":[],"attachments":[{"uid":"4871d3e9a9e89598","name":"stdout","source":"4871d3e9a9e89598.txt","type":"text/plain","size":128}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_module_fixture_tests.test_get_tourist_info::0","time":{"start":1686728802431,"stop":1686728802431,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_tourist_info"},{"name":"host","value":"fv-az1100-857"},{"name":"thread","value":"2361-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_tourist_info"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"abae4246b55197f1.json","parameterValues":[]}